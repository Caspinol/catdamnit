#!/usr/bin/env node

/**
 * Module dependencies.
 */
var
cert, key,
fs = require('fs'),
app = require('../server'),
config = app.locals.config,
log = require('log4js').getLogger('catdamnit'),
http = require('http'),
https = require('https'),
config = require('../config');

ssl_port = config.SSL.port;

if(config.ssl){
    try{
        cert = fs.readFileSync(config.SSL.cert, 'utf8');
        key = fs.readFileSync(config.SSL.key, 'utf8');
    }catch(err){
        log.error("Failed to read certificate files: ", err);
        process.exit(1);
    }
    credentials = {
        cert: cert,
        key: key
    },

    /**
     * Create HTTP server.
     */
    https.createServer(credentials, app).listen(ssl_port, "0.0.0.0", function(){
        log.info("Starting catdamnit.com web app");
        log.info("Listening on HTTPS port: "+ ssl_port);
    }).on('error', onError);
}

http.createServer(app)
    .listen(config.server.port, "0.0.0.0")
    .on('error', onError);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    
    var bind = typeof ssl_port === 'string'
        ? 'Pipe ' + ssl_port
        : 'Port ' + ssl_port;
    
    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        log.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        log.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}
